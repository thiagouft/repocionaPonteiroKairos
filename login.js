import puppeteer from "puppeteer";
import dotenv from "dotenv";

// Carregar vari√°veis do arquivo .env
dotenv.config();

const LOGIN_URL = "https://www.dimepkairos.com.br";
const ADVANCED_PAGE_URL =
  "https://www.dimepkairos.com.br/Dimep/Relogios/Advanced/5";

// Pegando credenciais do .env
const username = process.env.LOGIN;
const password = process.env.SENHA;

// üîπ Fun√ß√£o para obter a data do dia anterior
const getPreviousDate = () => {
  const date = new Date();
  date.setDate(date.getDate() - 1);
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
};

// üîπ Defina a data (ou use a data do dia anterior se n√£o fornecida)
const DATA_PERSONALIZADA = process.argv[2] || getPreviousDate();

const runAutomation = async () => {
  console.log("üîÑ Iniciando automa√ß√£o...");

  // 1Ô∏è‚É£ Inicializar o navegador
  const browser = await puppeteer.launch({ headless: false }); // Alterne para true se n√£o precisar ver o navegador
  const page = await browser.newPage();

  try {
    // 2Ô∏è‚É£ Acessar a p√°gina de login
    await page.goto(LOGIN_URL, { waitUntil: "networkidle2" });
    console.log("‚úÖ Acessou a p√°gina de login");

    // 3Ô∏è‚É£ Preencher o campo de login
    await page.waitForSelector("#LogOnModel_UserName");
    await page.type("#LogOnModel_UserName", username, { delay: 100 });

    // 4Ô∏è‚É£ Preencher o campo de senha
    await page.waitForSelector("#LogOnModel_Password");
    await page.type("#LogOnModel_Password", password, { delay: 100 });

    // 5Ô∏è‚É£ Clicar no bot√£o "Entrar"
    await page.waitForSelector("#btnFormLogin");
    await page.click("#btnFormLogin");

    console.log("üîë Tentando fazer login...");

    // 6Ô∏è‚É£ Esperar a navega√ß√£o p√≥s-login
    await page.waitForNavigation({ waitUntil: "networkidle2" });
    console.log("‚úÖ Login realizado com sucesso!");

    // 7Ô∏è‚É£ Acessar a p√°gina desejada
    await page.goto(ADVANCED_PAGE_URL, { waitUntil: "networkidle2" });
    console.log('‚úÖ P√°gina de "Reposi√ß√£o de Ponteiro" acessada.');

    // 8Ô∏è‚É£ Clicar na aba "Reposi√ß√£o do Ponteiro"
    await page.waitForSelector("#TabReposicaoPonteiro");
    await page.click("#TabReposicaoPonteiro");
    console.log('‚úÖ Aba "Reposi√ß√£o do Ponteiro" foi selecionada.');

    // 9Ô∏è‚É£ Selecionar "A partir da data"
    await page.waitForSelector('label[for="radioAPartirDeData"]');
    await page.click('label[for="radioAPartirDeData"]');
    console.log('üìÜ "A partir da data" foi selecionado.');

    // üîü Inserir a data personalizada no campo de entrada
    await page.waitForSelector("#textboxData");
    await page.evaluate((data) => {
      const dateInput = document.querySelector("#textboxData");
      dateInput.value = "";
      dateInput.value = data;
    }, DATA_PERSONALIZADA);
    console.log(`üìÖ Data "${DATA_PERSONALIZADA}" foi inserida.`);

    // 1Ô∏è‚É£1Ô∏è‚É£ Clicar no bot√£o "Enviar"
    await page.waitForSelector(".questionReposicaoPonteiro");
    await page.click(".questionReposicaoPonteiro");
    console.log("üöÄ Requisi√ß√£o enviada!");

    // 1Ô∏è‚É£2Ô∏è‚É£ Aguardar o modal de confirma√ß√£o e clicar no bot√£o "Sim"
    console.log("‚è≥ Aguardando a caixa de confirma√ß√£o...");
    await page.waitForSelector("#bReposicaoPonteiro", {
      visible: true,
      timeout: 5000,
    });
    await page.click("#bReposicaoPonteiro");
    console.log('‚úîÔ∏è Clique no bot√£o "Sim" confirmado!');

    // 1Ô∏è‚É£3Ô∏è‚É£ Clicar na aba "Comandos do Rel√≥gio"
    await page.waitForSelector("#TabExportarDados");
    await page.click("#TabExportarDados");
    console.log('‚úÖ Aba "Comandos do Rel√≥gio" foi selecionada.');

    // 1Ô∏è‚É£4Ô∏è‚É£ Selecionar a op√ß√£o "Importar"
    await page.waitForSelector('label[for="radioFunctionImportar"]');
    await page.click('label[for="radioFunctionImportar"]');
    console.log('üì• Op√ß√£o "Importar" foi selecionada.');

    // 1Ô∏è‚É£5Ô∏è‚É£ Marcar o checkbox "Marca√ß√µes"
    await page.waitForSelector('label[for="checkImportarMarcacoes"]');
    await page.click('label[for="checkImportarMarcacoes"]');
    console.log('‚úÖ Checkbox "Marca√ß√µes" foi marcado.');

    // 1Ô∏è‚É£6Ô∏è‚É£ Clicar no bot√£o "Importar"
    await page.waitForSelector(".buttonImportar");
    await page.click(".buttonImportar");
    console.log("üöÄ Dados importados com sucesso!");

    // üì∏ *Opcional: Capturar screenshot ap√≥s a conclus√£o*
    await page.screenshot({ path: "importacao_concluida.png" });
    console.log('üì∏ Screenshot salva como "importacao_concluida.png".');
  } catch (error) {
    console.error("‚ùå Erro durante a automa√ß√£o:", error);
  } finally {
    // 1Ô∏è‚É£7Ô∏è‚É£ Fechar o navegador
    await browser.close();
    console.log("üîí Navegador fechado.");
  }
};

// Executar automa√ß√£o
runAutomation();
