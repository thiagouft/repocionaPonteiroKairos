import puppeteer from 'puppeteer';
import dotenv from 'dotenv';

dotenv.config();

const LOGIN_URL = 'https://www.dimepkairos.com.br';
const ADVANCED_PAGE_BASE_URL = 'https://www.dimepkairos.com.br/Dimep/Relogios/Advanced/';
const username = process.env.LOGIN;
const password = process.env.SENHA;

const getPreviousDate = () => {
    const date = new Date();
    date.setDate(date.getDate() - 1);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
};

const DATA_PERSONALIZADA = process.argv[2] || getPreviousDate();

// Fun√ß√£o de espera (delay)
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const runAutomation = async () => {
    console.log('üîÑ Iniciando automa√ß√£o...');

    const browser = await puppeteer.launch({ headless: false, defaultViewport: null });
    const page = await browser.newPage();

    try {
        // Login
        await page.goto(LOGIN_URL, { waitUntil: 'networkidle2' });
        console.log('‚úÖ P√°gina de login carregada.');

        await page.waitForSelector('#LogOnModel_UserName');
        await page.type('#LogOnModel_UserName', username, { delay: 100 });
        await sleep(300); // üïí pequeno delay
        await page.type('#LogOnModel_Password', password, { delay: 100 });

        await page.waitForSelector('#btnFormLogin');
        await page.click('#btnFormLogin');
        console.log('üîê Dados de login enviados.');

        await page.waitForNavigation({ waitUntil: 'networkidle2' });
        console.log('‚úÖ Login realizado com sucesso.');

        // 1. Iterar por todos os rel√≥gios para fazer a reposi√ß√£o do ponteiro
        for (let i = 1; i <= 28; i++) {
            const ADVANCED_PAGE_URL = `${ADVANCED_PAGE_BASE_URL}${i}`;
            console.log(`\nüîÑ Processando reposi√ß√£o do ponteiro para o rel√≥gio ${i}...`);

            try {
                await page.goto(ADVANCED_PAGE_URL, { waitUntil: 'networkidle2' });
                await sleep(500); // üïí delay
                console.log(`‚úÖ Acessou o rel√≥gio ${i}`);

                await page.waitForSelector('#TabReposicaoPonteiro');
                await page.click('#TabReposicaoPonteiro');
                await sleep(500); // üïí delay
                console.log('‚úÖ Aba "Reposi√ß√£o do Ponteiro" selecionada.');

                await page.waitForSelector('label[for="radioAPartirDeData"]');
                await page.click('label[for="radioAPartirDeData"]');
                await sleep(300); // üïí delay

                await page.waitForSelector('#textboxData');
                await page.evaluate((data) => {
                    const dateInput = document.querySelector('#textboxData');
                    dateInput.value = '';
                    dateInput.value = data;
                }, DATA_PERSONALIZADA);
                console.log(`üìÖ Data "${DATA_PERSONALIZADA}" inserida.`);

                await sleep(300); // üïí delay
                await page.waitForSelector('.questionReposicaoPonteiro');
                await page.click('.questionReposicaoPonteiro');
                console.log('üöÄ Requisi√ß√£o enviada.');

                // Confirma√ß√£o (bot√£o "Sim")
                await page.waitForSelector('#bReposicaoPonteiro', { visible: true, timeout: 5000 });
                await sleep(300); // üïí delay
                await page.click('#bReposicaoPonteiro');
                console.log('‚úîÔ∏è Confirma√ß√£o da reposi√ß√£o executada.');

            } catch (innerErr) {
                console.error(`‚ùå Erro na reposi√ß√£o do ponteiro para o rel√≥gio ${i}: ${innerErr.message}`);
                continue;
            }
        }

        // 2. Iterar por todos os rel√≥gios para fazer a 1¬™ importa√ß√£o (Status Completo e Status Imediato)
        for (let i = 1; i <= 28; i++) {
            const ADVANCED_PAGE_URL = `${ADVANCED_PAGE_BASE_URL}${i}`;
            console.log(`\nüîÑ Processando 1¬™ importa√ß√£o para o rel√≥gio ${i}...`);

            try {
                await page.goto(ADVANCED_PAGE_URL, { waitUntil: 'networkidle2' });
                await sleep(500); // üïí delay

                await page.waitForSelector('#TabExportarDados', { visible: true, timeout: 5000 });

                await page.evaluate(() => {
                    const exportTab = document.querySelector('#TabExportarDados');
                    if (exportTab) exportTab.scrollIntoView({ behavior: "smooth", block: "center" });
                });
                await sleep(500);

                await page.waitForFunction(() => {
                    const el = document.querySelector('#TabExportarDados');
                    return el && el.offsetParent !== null;
                }, { timeout: 3000 });

                await page.click('#TabExportarDados');
                await sleep(500);
                console.log('üìÅ Aba "Comandos do Rel√≥gio" aberta.');

                // Seleciona "Importar"
                await page.waitForSelector('label[for="radioFunctionImportar"]');
                await page.click('label[for="radioFunctionImportar"]');
                await sleep(300);
                console.log('‚òëÔ∏è Op√ß√£o "Importar" selecionada para "Status Completo" e "Status Imediato".');

                // Marca "Status Completo"
                await page.waitForSelector('label[for="checkboxImportarStatusCompleto"]');
                await page.click('label[for="checkboxImportarStatusCompleto"]');
                await sleep(300);
                console.log('üîò "Status Completo" marcado.');

                // Marca "Status Imediato"
                await page.waitForSelector('label[for="checkboxImportarStatusImediato"]');
                await page.click('label[for="checkboxImportarStatusImediato"]');
                await sleep(300);
                console.log('üîò "Status Imediato" marcado.');

                // Clica em "Importar"
                await page.waitForSelector('.buttonImportar');
                await page.click('.buttonImportar');
                await sleep(1000);
                console.log('üì® Importa√ß√£o de "Status Completo" e "Status Imediato" conclu√≠da.');

            } catch (innerErr) {
                console.error(`‚ùå Erro na 1¬™ importa√ß√£o para o rel√≥gio ${i}: ${innerErr.message}`);
                continue;
            }
        }

        // 3. Iterar por todos os rel√≥gios para fazer a 2¬™ importa√ß√£o (Marca√ß√µes)
        for (let i = 1; i <= 28; i++) {
            const ADVANCED_PAGE_URL = `${ADVANCED_PAGE_BASE_URL}${i}`;
            console.log(`\nüîÑ Processando 2¬™ importa√ß√£o para o rel√≥gio ${i}...`);

            try {
                await page.goto(ADVANCED_PAGE_URL, { waitUntil: 'networkidle2' });
                await sleep(500); // üïí delay

                await page.waitForSelector('#TabExportarDados', { visible: true, timeout: 5000 });

                await page.evaluate(() => {
                    const exportTab = document.querySelector('#TabExportarDados');
                    if (exportTab) exportTab.scrollIntoView({ behavior: "smooth", block: "center" });
                });
                await sleep(500);

                await page.waitForFunction(() => {
                    const el = document.querySelector('#TabExportarDados');
                    return el && el.offsetParent !== null;
                }, { timeout: 3000 });

                await page.click('#TabExportarDados');
                await sleep(500);
                console.log('üìÅ Aba "Comandos do Rel√≥gio" aberta.');

                // Seleciona "Importar"
                await page.waitForSelector('label[for="radioFunctionImportar"]');
                await page.click('label[for="radioFunctionImportar"]');
                await sleep(300);
                console.log('‚òëÔ∏è Op√ß√£o "Importar" selecionada novamente para "Marca√ß√µes".');

                // Marca "Marca√ß√µes"
                await page.waitForSelector('label[for="checkImportarMarcacoes"]');
                await page.click('label[for="checkImportarMarcacoes"]');
                await sleep(300);
                console.log('üîò "Marca√ß√µes" marcado.');

                // Clica em "Importar"
                await page.waitForSelector('.buttonImportar');
                await page.click('.buttonImportar');
                await sleep(1000);
                console.log('üì® Importa√ß√£o de "Marca√ß√µes" conclu√≠da.');

            } catch (innerErr) {
                console.error(`‚ùå Erro na 2¬™ importa√ß√£o para o rel√≥gio ${i}: ${innerErr.message}`);
                continue;
            }
        }

        // 4. Iterar por todos os rel√≥gios para fazer a 3¬™ importa√ß√£o (Status Completo e Status Imediato novamente)
        for (let i = 1; i <= 28; i++) {
            const ADVANCED_PAGE_URL = `${ADVANCED_PAGE_BASE_URL}${i}`;
            console.log(`\nüîÑ Processando 3¬™ importa√ß√£o para o rel√≥gio ${i}...`);

            try {
                await page.goto(ADVANCED_PAGE_URL, { waitUntil: 'networkidle2' });
                await sleep(500); // üïí delay

                await page.waitForSelector('#TabExportarDados', { visible: true, timeout: 5000 });

                await page.evaluate(() => {
                    const exportTab = document.querySelector('#TabExportarDados');
                    if (exportTab) exportTab.scrollIntoView({ behavior: "smooth", block: "center" });
                });
                await sleep(500);

                await page.waitForFunction(() => {
                    const el = document.querySelector('#TabExportarDados');
                    return el && el.offsetParent !== null;
                }, { timeout: 3000 });

                await page.click('#TabExportarDados');
                await sleep(500);
                console.log('üìÅ Aba "Comandos do Rel√≥gio" aberta.');

                // Seleciona "Importar"
                await page.waitForSelector('label[for="radioFunctionImportar"]');
                await page.click('label[for="radioFunctionImportar"]');
                await sleep(300);
                console.log('‚òëÔ∏è Op√ß√£o "Importar" selecionada novamente para "Status Completo" e "Status Imediato".');

                // Marca "Status Completo"
                await page.waitForSelector('label[for="checkboxImportarStatusCompleto"]');
                await page.click('label[for="checkboxImportarStatusCompleto"]');
                await sleep(300);
                console.log('üîò "Status Completo" marcado.');

                // Marca "Status Imediato"
                await page.waitForSelector('label[for="checkboxImportarStatusImediato"]');
                await page.click('label[for="checkboxImportarStatusImediato"]');
                await sleep(300);
                console.log('üîò "Status Imediato" marcado.');

                // Clica em "Importar"
                await page.waitForSelector('.buttonImportar');
                await page.click('.buttonImportar');
                await sleep(1000);
                console.log('üì® Importa√ß√£o de "Status Completo" e "Status Imediato" conclu√≠da novamente.');

            } catch (innerErr) {
                console.error(`‚ùå Erro na 3¬™ importa√ß√£o para o rel√≥gio ${i}: ${innerErr.message}`);
                continue;
            }
        }

    } catch (globalErr) {
        console.error('‚ùå Erro geral na automa√ß√£o:', globalErr.message);
    } finally {
        await browser.close();
        console.log('üîí Navegador encerrado.');
    }
};

runAutomation();
